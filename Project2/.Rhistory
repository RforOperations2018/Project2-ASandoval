sale.load <- read_csv ("SheriffsSale.csv")
sale.load <- read_csv ("SherrifsSale.csv")
sale.load <- read_csv ("sales.csv")
setwd("~/Documents/GitHub/Project2/Project2-ASandoval/Project2")
sale.load <- read_csv ("sales.csv")
property.load <- read_csv ("projectdata_7.csv")
runApp()
View(sale.load)
View(sale.load)
sale <- read_csv ("sales_2.csv")
sale.load <- read_csv ("sales_2.csv")
runApp()
runApp()
sale.load<- as.POSIXct(SaleDate)
sale.load <- read_csv ("sales_2.csv")
sale.load<- as.POSIXct(SaleDate)
sale.load<- as.POSIXct(sale.load$SaleDate)
sale.load <- read_csv ("sales_2.csv")
sale.load<- sale.load$as.POSIXct(SaleDate)
sale.load<- sale.load$as.POSIXct(SaleDate)
sale.load<- sale.load$as.integer(ZIPCode)
sale.load<- sale.load$as.integer(ZIPCode)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
sale.upload <- read_csv ("sales_2.csv")
property.load <- read_csv ("projectdata_7.csv")
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
install.packages("scales")
install.packages("scales")
library(scales)
library(scales)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
sale.upload <- read_csv ("sales_2.csv")
property.load <- read_csv ("projectdata_7.csv")
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
sale.upload <- read_csv ("sales_2.csv")
sale.upload <- read.csv ("sales_2.csv")
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
View(sale.upload)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(shinydashboard)
library(readr)
library(scales)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Project1-ASandoval-master')
runApp('~/Documents/GitHub/Project1-ASandoval-master')
runApp()
runApp()
shiny::runApp()
runApp()
View(sale.load)
runApp()
View(sale.load)
runApp()
runApp()
runApp()
runApp()
View(sale.load)
runApp()
runApp()
runApp('~/Downloads/Project1_dcontrer-master/Project1')
install.packages("shinyWidgets")
runApp('~/Downloads/Project1_dcontrer-master/Project1')
install.packages(c("RSocrata", "jsonlite"))
shiny::runApp('~/Downloads/Project1_dcontrer-master/Project1')
runApp('~/Downloads/Project1_dcontrer-master/Project1')
install.packages(c("shinythemes", "lubridate"))
shiny::runApp('~/Downloads/Project1_dcontrer-master/Project1')
token <- jsonlite::fromJSON("token2.json")$token
token <- jsonlite::fromJSON("token2.json")$token
selectDat <- read.socrata("https://data.cityofchicago.org/resource/3uz7-d32j.json?$select=_primary_decsription, date_of_occurrence",
app_token = token)
crimes <- as.character(unique(selectDat$X_primary_decsription))
remove(selectDat)
runApp('~/Downloads/Project1_dcontrer-master/Project1')
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
sale.upload <- read.csv ("sales_2.csv")
property.load <- read.csv ("projectdata_7.csv")
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
pdf(NULL)
header <- dashboardHeader(title = "Pittsburgh Properties",
dropdownMenu(type = "messages",
messageItem(
from = "Mayor Bill Peduto",
message = HTML("We need to increase the tax base!"),
icon = icon("exclamation-circle"))
))
sidebar <- dashboardSidebar(
# bars on the side
sidebarMenu(
id = "tabs",
menuItem("plot", icon = icon("bar-chart"), tabName = "Plot"),
menuItem("table", icon = icon("table"), tabName = "Data Table"),
# Category Select
selectInput("categorySelect",
"Types of Sheriff Sale's:",
choices = sort(unique(sale.load$SaleType)),
multiple = TRUE,
selectize = TRUE,
selected = c("Mortgage Foreclosure", "Municipal Lien", "Other Real Estate")),
# Date Select
dateRangeInput("dateSelect",
"Sheriff Sale Auction Date:",
start = Sys.Date()-38, end = Sys.Date()-7,
min = "2001-01-01", max = Sys.Date()-7,
format = "yyyy-mm-dd", startview = "month", weekstart = 0,
language = "en", separator = " to ", width = NULL),
# Select Amount Owed
sliderInput("taxesSelect",
"Outstanding Taxes Owed:",
min = min(sale.load$CostsTaxes, na.rm = T),
max = max(sale.load$CostsTaxes, na.rm = T),
value = c(min(sale.load$CostsTaxes, na.rm = T), max(sale.load$CostsTaxes, na.rm = T)),
step = 5000),
# Select Ready for Auction
selectizeInput("readySelect",
"Is the Property Ready for Auction?",
choices = c("Yes", "No"),
multiple = FALSE,
selected = "Yes"),
# Download Data Buttion
tabItem("table",
inputPanel(
downloadButton("downloadData","Download Sheriff Sale Data")))
))
body <- dashboardBody(tabItems(
# names of boxes
tabItem("plot",
fluidRow(
infoBoxOutput("attorney"),
infoBoxOutput("avgtaxes"),
infoBoxOutput("zipcode")),
# names of the plot tabs
fluidRow(
tabBox(title = "Plot", width = 12,
tabPanel("Property Change of Value", plotlyOutput("plot_value")),
tabPanel("Sum of taxes owed by Zip Code", plotlyOutput("plot_properties"))))
),
# Table name
tabItem("table",
fluidPage(
box(title = "Pittsburgh Sheriff Sales Properties ", DT::dataTableOutput("table"), width = 12)))
))
ui <- dashboardPage(header, sidebar, body)
# Define server logic
server <- function(input, output) {
propInput <- reactive({
property <- sale.load  %>%
# Slider Filter
filter(CostsTaxes >= input$taxesSelect[1] & CostsTaxes <= input$taxesSelect[2])
# Category Filter
if (length(input$categorySelect) > 0 ) {
property <- subset(property, SaleType %in% input$categorySelect)
}
# Property ready for sale filter?
if (length(input$readySelect) > 0 ) {
property <- subset(property, ReadyForSale %in% input$readySelect)
}
return(property)
})
# Reactive melted data
# mInput <- reactive({
#   property <- propInput()
# })
# Plot 1-  Counts of Properties by Sale Tpes
output$plot_value <- renderPlotly({
property <- propInput()
ggplot(data = sale.load,
aes(x = SaleType,
fill = SaleStatus))  +
geom_bar(position = "stack") +
guides(fill = FALSE) +
scale_y_continuous(name = "Count of Properties") +
theme(axis.text.x = element_text(angle = 15,
vjust = 1,
hjust = 1))
})
# Plot 2- Plot showing taxes owed by zip code
output$plot_properties <- renderPlotly({
property <- propInput ()
ggplot (data = sale.load,
aes (x = ZIPCode,
y = round (CostsTaxes, 0), na.rm = T )) +
geom_col (position = position_dodge(width = 1)) +
guides (fill = FALSE) +
theme(axis.text.x = element_text(angle = 30,
hjust = 1),
axis.text = element_text(size = rel(0.5))) +
scale_y_continuous (name = "Sum of Taxes Owed") +
scale_x_discrete (name = "Zip Code")
})
# Data table of Assessment
output$table <- DT::renderDataTable({
subset(propInput(), select = c(DocketNumber, SaleType, AttorneyName, Plaintiff, Defendant, SaleDate, Address, CostsTaxes))
})
# Average current market value box
output$attorney <- renderInfoBox({
proper <- propInput()
name <- names(sort(table(sale.load$AttorneyName), decreasing = TRUE))
valueBox(subtitle = "Is the most common Attorney", value = name, icon = icon("briefcase"),  color = "green")
})
# Average sale price box
output$avgtaxes <- renderValueBox({
proper <- propInput()
nums <- prettyNum(round(mean(sale.load$CostsTaxes, na.rm = T), 0))
valueBox(subtitle = "Average Taxes Owed ", value = nums, icon = icon("usd"), color = "red")
})
# Total Taxable Land box
output$zipcode <- renderValueBox({
proper <- propInput()
name <- names(sort(table(sale.load$ZIPCode), decreasing = TRUE))
valueBox(subtitle = "This Zipcode has the most Sheriff Sales", value = name, icon("home"), color = "blue")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
?propInput()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
SaleYear = substring(SaleDate,7,10),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleYear = substring(SaleDate,7,10),
SaleDate = as.POSIXct(SaleDate),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
View(sale.upload)
runApp()
runApp()
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
SaleDate = as.POSIXct(SaleDate),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
mutate(
SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"20%Y"),
SaleDate = as.POSIXct(SaleDate),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"20%Y"),
SaleDate = as.POSIXct(SaleDate),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"2%Y"),
SaleDate = as.POSIXct(SaleDate),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleYear = format(as.Date(SaleDate, format="%d/%m/20%Y"),"%Y"),
SaleDate = as.POSIXct(SaleDate),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleYear = format(as.Date(SaleDate, format="%d/%m/2%Y"),"%Y"),
SaleDate = as.POSIXct(SaleDate),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
runApp()
View(sale.load)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(date.mmddyyyy(SaleDate, sep = "/")),
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
install.packages("date")
library(date)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(date.mmddyyyy(SaleDate, sep = "/")),
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(date.mmddyyyy(SaleDate, sep = "/"))
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
# ZIPCode = str_replace_all(ZIPCode, '"', ""),
# AttorneyName = str_replace_all(AttorneyName, '"', ""),
# ReadyForSale = case_when(
#   ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
#   ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(date.mmddyyyy(as.date(SaleDate), sep = "/"))
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
# ZIPCode = str_replace_all(ZIPCode, '"', ""),
# AttorneyName = str_replace_all(AttorneyName, '"', ""),
# ReadyForSale = case_when(
#   ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
#   ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(date.mmddyyyy(as.date(SaleDate)))
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
# ZIPCode = str_replace_all(ZIPCode, '"', ""),
# AttorneyName = str_replace_all(AttorneyName, '"', ""),
# ReadyForSale = case_when(
#   ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
#   ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(as.date(SaleDate))
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
# ZIPCode = str_replace_all(ZIPCode, '"', ""),
# AttorneyName = str_replace_all(AttorneyName, '"', ""),
# ReadyForSale = case_when(
#   ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
#   ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate)
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
# ZIPCode = str_replace_all(ZIPCode, '"', ""),
# AttorneyName = str_replace_all(AttorneyName, '"', ""),
# ReadyForSale = case_when(
#   ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
#   ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
runApp()
runApp('~/Documents/GitHub/HW2_ASANDOVAL')
ckanSQL <- function(url) {
# MAKE REQUEST
r <- RETRY("GET", URLencode(url))
# EXTRACT CONTENT
c <- content(r, "text")
# CREATE DATAFRAME
data.frame(jsonlite::fromJSON(c)$rows)
}
# UNIQUE VALUES FOR RESOURCE FIELD
ckanUniques <- function(field, id) {
url <- paste0("https://phl.carto.com/api/v2/sql?q=SELECT+", field, "+FROM+", id)
c(ckanSQL(URLencode(url)))
}
runApp()
