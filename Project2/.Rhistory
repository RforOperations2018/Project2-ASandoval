require(stringr)
route <- readOGR("marathon.geojson")
plot(route)
route <- readOGR("marathon.geojson")
runApp('Project2-ASandoval/Project2')
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly 2018 Marathon Route
addPolylines(data = route, color = "#000000", fillOpacity = 1, weight = 10) %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00, weight = 3, highlightOptions = highlightOptions(color = "red", bringToFront = TRUE)) %>%
# Add Philly 2018 Mile Markers
addAwesomeMarkers(data = markers, icon = icons, label = ~as.character(marker.symbol)) %>%
# Add Basemaps
addProviderTiles(providers$OpenMapSurfer.Grayscale, options = providerTileOptions(noWrap = TRUE)) %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
addProviderTiles("Esri.WorldImagery", options = providerTileOptions(noWrap = TRUE), group = "Imagery") %>%
addProviderTiles("Esri.WorldTerrain", options = providerTileOptions(noWrap = TRUE), group = "Terrain") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default", "Imagery", "Terrain"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# Set View
setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1) %>%
# Add Legend
addControl(html_legend, position = "bottomleft")
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly 2018 Marathon Route
addPolylines(data = route, color = "#000000", fillOpacity = 1, weight = 10) %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00, weight = 3, highlightOptions = highlightOptions(color = "red", bringToFront = TRUE)) %>%
# Add Philly 2018 Mile Markers
addAwesomeMarkers(data = markers, icon = icons, label = ~as.character(marker.symbol)) %>%
# Add Basemaps
addProviderTiles(providers$OpenMapSurfer.Grayscale, options = providerTileOptions(noWrap = TRUE)) %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
addProviderTiles("Esri.WorldImagery", options = providerTileOptions(noWrap = TRUE), group = "Imagery") %>%
addProviderTiles("Esri.WorldTerrain", options = providerTileOptions(noWrap = TRUE), group = "Terrain") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default", "Imagery", "Terrain"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# Set View
setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1) %>%
# Add Legend
addControl(html_legend, position = "bottomleft")
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly 2018 Marathon Route
addPolylines(data = route, color = "#000000", fillOpacity = 1, weight = 10) %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00, weight = 3, highlightOptions = highlightOptions(color = "red", bringToFront = TRUE)) %>%
# Add Philly 2018 Mile Markers
addAwesomeMarkers(data = markers, icon = icons, label = ~as.character(marker.symbol)) %>%
# Add Basemaps
addProviderTiles(providers$OpenMapSurfer.Grayscale, options = providerTileOptions(noWrap = TRUE)) %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
addProviderTiles("Esri.WorldImagery", options = providerTileOptions(noWrap = TRUE), group = "Imagery") %>%
addProviderTiles("Esri.WorldTerrain", options = providerTileOptions(noWrap = TRUE), group = "Terrain") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default", "Imagery", "Terrain"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# Set View
setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1) %>%
# Add Legend
addControl(html_legend, position = "bottomleft")
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
require(rgdal)
require(rgdal)
require(rgdal)
require(rgdal)
require(rgdal)
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
route <- readOGR("marathon.geojson")
plot(route)
route <- readOGR("marathon.geojson")
plot(route)
route <- readOGR("marathon.geojson")
plot(route)
route <- readOGR("marathon.geojson")
plot(route)
route <- readOGR("marathon.geojson")
plot(route)
library(rdal)
library(rgdal)
library(rgdal)
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
library(rgdal)
library(rgdal)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
require(leaflet)
require(leaflet)
route <- readOGR("marathon.geojson")
plot(route)
runApp('Project2-ASandoval/Project2')
route <- readOGR("marathon.geojson")
plot(route)
route <- readOGR("marathon.geojson")
plot(route)
route <- readOGR("marathon.geojson")
plot(route)
library(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
# Upload polylines, polypoints, and polygons
route <- readOGR("marathon.geojson")
plot(route)
# Upload polylines, polypoints, and polygons
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly 2018 Marathon Route
addPolylines(data = route, color = "#000000", fillOpacity = 1, weight = 10) %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00, weight = 3, highlightOptions = highlightOptions(color = "red", bringToFront = TRUE)) %>%
# Add Philly 2018 Mile Markers
addAwesomeMarkers(data = markers, icon = icons, label = ~as.character(marker.symbol)) %>%
# Add Basemaps
addProviderTiles(providers$OpenMapSurfer.Grayscale, options = providerTileOptions(noWrap = TRUE)) %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
addProviderTiles("Esri.WorldImagery", options = providerTileOptions(noWrap = TRUE), group = "Imagery") %>%
addProviderTiles("Esri.WorldTerrain", options = providerTileOptions(noWrap = TRUE), group = "Terrain") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default", "Imagery", "Terrain"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# Set View
setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1) %>%
# Add Legend
addControl(html_legend, position = "bottomleft")
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
route <- readOGR("marathon.geojson")
plot(route)
# Upload polylines, polypoints, and polygons
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly 2018 Marathon Route
addPolylines(data = route, color = "#000000", fillOpacity = 1, weight = 10) %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00, weight = 3, highlightOptions = highlightOptions(color = "red", bringToFront = TRUE)) %>%
# Add Philly 2018 Mile Markers
addAwesomeMarkers(data = markers, icon = icons, label = ~as.character(marker.symbol)) %>%
# Add Basemaps
addProviderTiles(providers$OpenMapSurfer.Grayscale, options = providerTileOptions(noWrap = TRUE)) %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
addProviderTiles("Esri.WorldImagery", options = providerTileOptions(noWrap = TRUE), group = "Imagery") %>%
addProviderTiles("Esri.WorldTerrain", options = providerTileOptions(noWrap = TRUE), group = "Terrain") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default", "Imagery", "Terrain"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# Set View
setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1) %>%
# Add Legend
addControl(html_legend, position = "bottomleft")
View(hoods)
View(icons)
# Upload packages
library(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
# Upload polylines, polypoints, and polygons
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly 2018 Marathon Route
addPolylines(data = route, color = "#000000", fillOpacity = 1, weight = 10) %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00, weight = 3, highlightOptions = highlightOptions(color = "red", bringToFront = TRUE)) %>%
# Add Philly 2018 Mile Markers
addAwesomeMarkers(data = markers, icon = icons, label = ~as.character(marker.symbol)) %>%
# Add Basemaps
addProviderTiles(providers$OpenMapSurfer.Grayscale, options = providerTileOptions(noWrap = TRUE)) %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
addProviderTiles("Esri.WorldImagery", options = providerTileOptions(noWrap = TRUE), group = "Imagery") %>%
addProviderTiles("Esri.WorldTerrain", options = providerTileOptions(noWrap = TRUE), group = "Terrain") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default", "Imagery", "Terrain"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# Set View
setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1) %>%
# Add Legend
addControl(html_legend, position = "bottomleft")
plot(route)
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
runApp('Project2-ASandoval/Project2')
runApp('Project2-ASandoval/Project2')
sale.load <- read_csv ("SheriffsSale.csv")
sale.load <- read_csv ("SherrifsSale.csv")
sale.load <- read_csv ("sales.csv")
setwd("~/Documents/GitHub/Project2/Project2-ASandoval/Project2")
sale.load <- read_csv ("sales.csv")
property.load <- read_csv ("projectdata_7.csv")
runApp()
View(sale.load)
View(sale.load)
sale <- read_csv ("sales_2.csv")
sale.load <- read_csv ("sales_2.csv")
runApp()
runApp()
sale.load<- as.POSIXct(SaleDate)
sale.load <- read_csv ("sales_2.csv")
sale.load<- as.POSIXct(SaleDate)
sale.load<- as.POSIXct(sale.load$SaleDate)
sale.load <- read_csv ("sales_2.csv")
sale.load<- sale.load$as.POSIXct(SaleDate)
sale.load<- sale.load$as.POSIXct(SaleDate)
sale.load<- sale.load$as.integer(ZIPCode)
sale.load<- sale.load$as.integer(ZIPCode)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
sale.upload <- read_csv ("sales_2.csv")
property.load <- read_csv ("projectdata_7.csv")
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
install.packages("scales")
install.packages("scales")
library(scales)
library(scales)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
sale.upload <- read_csv ("sales_2.csv")
property.load <- read_csv ("projectdata_7.csv")
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
sale.upload <- read_csv ("sales_2.csv")
sale.upload <- read.csv ("sales_2.csv")
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
View(sale.upload)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(shinydashboard)
library(readr)
library(scales)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate))
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Project1-ASandoval-master')
runApp('~/Documents/GitHub/Project1-ASandoval-master')
runApp()
runApp()
shiny::runApp()
runApp()
View(sale.load)
runApp()
View(sale.load)
runApp()
runApp()
runApp()
runApp()
View(sale.load)
runApp()
runApp()
runApp('~/Downloads/Project1_dcontrer-master/Project1')
install.packages("shinyWidgets")
runApp('~/Downloads/Project1_dcontrer-master/Project1')
install.packages(c("RSocrata", "jsonlite"))
shiny::runApp('~/Downloads/Project1_dcontrer-master/Project1')
runApp('~/Downloads/Project1_dcontrer-master/Project1')
install.packages(c("shinythemes", "lubridate"))
shiny::runApp('~/Downloads/Project1_dcontrer-master/Project1')
token <- jsonlite::fromJSON("token2.json")$token
token <- jsonlite::fromJSON("token2.json")$token
selectDat <- read.socrata("https://data.cityofchicago.org/resource/3uz7-d32j.json?$select=_primary_decsription, date_of_occurrence",
app_token = token)
crimes <- as.character(unique(selectDat$X_primary_decsription))
remove(selectDat)
runApp('~/Downloads/Project1_dcontrer-master/Project1')
runApp()
shiny::runApp()
runApp()
runApp()
