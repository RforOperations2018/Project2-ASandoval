AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
runApp()
View(sale.load)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(date.mmddyyyy(SaleDate, sep = "/")),
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
install.packages("date")
library(date)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(date.mmddyyyy(SaleDate, sep = "/")),
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(date.mmddyyyy(SaleDate, sep = "/"))
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
# ZIPCode = str_replace_all(ZIPCode, '"', ""),
# AttorneyName = str_replace_all(AttorneyName, '"', ""),
# ReadyForSale = case_when(
#   ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
#   ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(date.mmddyyyy(as.date(SaleDate), sep = "/"))
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
# ZIPCode = str_replace_all(ZIPCode, '"', ""),
# AttorneyName = str_replace_all(AttorneyName, '"', ""),
# ReadyForSale = case_when(
#   ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
#   ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(date.mmddyyyy(as.date(SaleDate)))
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
# ZIPCode = str_replace_all(ZIPCode, '"', ""),
# AttorneyName = str_replace_all(AttorneyName, '"', ""),
# ReadyForSale = case_when(
#   ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
#   ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(as.date(SaleDate))
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
# ZIPCode = str_replace_all(ZIPCode, '"', ""),
# AttorneyName = str_replace_all(AttorneyName, '"', ""),
# ReadyForSale = case_when(
#   ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
#   ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate)
# SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
# ZIPCode = str_replace_all(ZIPCode, '"', ""),
# AttorneyName = str_replace_all(AttorneyName, '"', ""),
# ReadyForSale = case_when(
#   ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
#   ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
sale.upload <- read.csv ("sales_2.csv")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
SaleYear = format(as.Date(SaleDate, format="%d/%m/%Y"),"%Y"),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
runApp()
runApp('~/Documents/GitHub/HW2_ASANDOVAL')
ckanSQL <- function(url) {
# MAKE REQUEST
r <- RETRY("GET", URLencode(url))
# EXTRACT CONTENT
c <- content(r, "text")
# CREATE DATAFRAME
data.frame(jsonlite::fromJSON(c)$rows)
}
# UNIQUE VALUES FOR RESOURCE FIELD
ckanUniques <- function(field, id) {
url <- paste0("https://phl.carto.com/api/v2/sql?q=SELECT+", field, "+FROM+", id)
c(ckanSQL(URLencode(url)))
}
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?stat
runApp()
library(leaflet)
require(leaflet)
require(leaflet.extras)
require(readxl)
# Upload packages
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(readxl)
require(dplyr)
require(stringr)
# 2018 Philadelphia Marathon Route
# This data was created from http://geojson.io/#map=2/20.0/0.0.
# Point and line data was traced from the 2018 Philadelphia marathon website, https://philadelphiamarathon.phila.gov/#/
# Neighborhoods were downloaded from https://github.com/azavea/geo-data
# Upload polylines, polypoints, and polygons
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00, weight = 3, highlightOptions = highlightOptions(color = "red", bringToFront = TRUE)) %>%
# Add Basemaps
addProviderTiles(providers$OpenMapSurfer.Grayscale, options = providerTileOptions(noWrap = TRUE)) %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
addProviderTiles("Esri.WorldTerrain", options = providerTileOptions(noWrap = TRUE), group = "Terrain") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default", "Terrain"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# Set View
setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1)
# Upload packages
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(readxl)
require(dplyr)
require(stringr)
# 2018 Philadelphia Marathon Route
# This data was created from http://geojson.io/#map=2/20.0/0.0.
# Point and line data was traced from the 2018 Philadelphia marathon website, https://philadelphiamarathon.phila.gov/#/
# Neighborhoods were downloaded from https://github.com/azavea/geo-data
# Upload polylines, polypoints, and polygons
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00, weight = 3, highlightOptions = highlightOptions(color = "red", bringToFront = TRUE)) %>%
# Add Basemaps
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# Set View
setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1)
# Upload packages
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(readxl)
require(dplyr)
require(stringr)
# 2018 Philadelphia Marathon Route
# This data was created from http://geojson.io/#map=2/20.0/0.0.
# Point and line data was traced from the 2018 Philadelphia marathon website, https://philadelphiamarathon.phila.gov/#/
# Neighborhoods were downloaded from https://github.com/azavea/geo-data
# Upload polylines, polypoints, and polygons
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00) %>%
# Add Basemaps
addProviderTiles(providers$OpenMapSurfer.Grayscale, options = providerTileOptions(noWrap = TRUE)) %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
addProviderTiles("Esri.WorldTerrain", options = providerTileOptions(noWrap = TRUE), group = "Terrain") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default", "Terrain"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# Set View
setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1)
runApp()
# Upload packages
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(readxl)
require(dplyr)
require(stringr)
# 2018 Philadelphia Marathon Route
# This data was created from http://geojson.io/#map=2/20.0/0.0.
# Point and line data was traced from the 2018 Philadelphia marathon website, https://philadelphiamarathon.phila.gov/#/
# Neighborhoods were downloaded from https://github.com/azavea/geo-data
# Upload polylines, polypoints, and polygons
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00) %>%
# Add Basemaps
addProviderTiles(providers$OpenMapSurfer.Grayscale, options = providerTileOptions(noWrap = TRUE)) %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
addProviderTiles("Esri.WorldTerrain", options = providerTileOptions(noWrap = TRUE), group = "Terrain") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default", "Terrain"),
options = layersControlOptions(collapsed = FALSE)
)
#%>%
# Set View
# setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1)
# Upload packages
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(readxl)
require(dplyr)
require(stringr)
# 2018 Philadelphia Marathon Route
# This data was created from http://geojson.io/#map=2/20.0/0.0.
# Point and line data was traced from the 2018 Philadelphia marathon website, https://philadelphiamarathon.phila.gov/#/
# Neighborhoods were downloaded from https://github.com/azavea/geo-data
# Upload polylines, polypoints, and polygons
route <- readOGR("marathon.geojson")
plot(route)
markers <- readOGR("finalmarkers.geojson")
plot(markers)
hoods <- readOGR("Neighborhoods_Philadelphia.geojson")
plot(hoods)
# Add an if else statement to change colors of the markers
getColor <- function(markers) {
sapply(markers$marker.symbol, function(marker.symbol) {
if(marker.symbol %in% "S") {
"green"
} else if(marker.symbol %in% "F") {
"red"
} else {
"orange"
} })
}
# Add icons
icons <- awesomeIcons(
text = ~as.character(marker.symbol),
markerColor = getColor(markers)
)
# Choose Icon Legend
html_legend <- "Philadelphia Marathon 2018 Route <br/> <br/> <img src='https://png.icons8.com/material-outlined/50/000000/marker.png'>Mile Markers "
# Plot map
leaflet() %>%
# Add Philly Neighborhoods
addPolygons(data = hoods, color = "#1ab2ff", label = ~mapname, fillOpacity = 0.00) %>%
# Add Basemaps
addProviderTiles(providers$OpenMapSurfer.Grayscale, options = providerTileOptions(noWrap = TRUE)) %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group = "Default") %>%
addProviderTiles("Esri.WorldTerrain", options = providerTileOptions(noWrap = TRUE), group = "Terrain") %>%
# Add Layers control
addLayersControl(
baseGroups = c("Default", "Terrain"),
options = layersControlOptions(collapsed = FALSE)
)
#%>%
# Set View
# setView( lat = 39.980379,  lng= -75.165490, zoom = 12.1)
runApp()
runApp()
sale.upload <- read.csv ("sales_2.csv")
zipcodes <- readOGR("County_Zip_Code.geojson")
pdf(NULL)
sale.load <- sale.upload %>%
mutate(
SaleDate = as.POSIXct(SaleDate),
ZIPCode = str_replace_all(ZIPCode, '"', ""),
AttorneyName = str_replace_all(AttorneyName, '"', ""),
ReadyForSale = case_when(
ReadyForSale %in% c("yes", "yes.no", TRUE) ~ "Yes",
ReadyForSale %in% c("no", "no.no", FALSE) ~ "No")
)
runApp()
install.packages("mapview")
library(mapview)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/hw2-nikitas-master/hw2-nikitas.R')
install.packages("shinyjs")
runApp('~/Downloads/hw2-nikitas-master/hw2-nikitas.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(shinydashboard)
library(readr)
library(grid)
library(scales)
library(leaflet)
library(leaflet.extras)
library(readxl)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(shinydashboard)
library(readr)
library(grid)
library(scales)
library(leaflet)
library(leaflet.extras)
library(readxl)
ckanSQL <- function(url) {
# Make the Request
r <- RETRY("GET", URLencode(url))
# Extract Content
c <- content(r, "text")
# Basic gsub to make NA's consistent with R
json <- gsub("NaN|''", 'NA', c, perl = TRUE)
# Create Dataframe
data.frame(jsonlite::fromJSON(json)$result$records)
}
runApp()
runApp()
runApp()
runApp('~/Downloads/hw2-nikitas-master/hw2-nikitas.R')
runApp()
runApp()
runApp('~/Documents/GitHub/HW2_ASANDOVAL')
runApp()
runApp('~/Downloads/hw2-htownsen-master/app2.R')
install.packages("wordcloud2")
runApp('~/Downloads/hw2-htownsen-master/app2.R')
runApp()
shiny::runApp()
shiny::runApp()
